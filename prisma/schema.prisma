// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url   = env("DATABASE_URL")
}

model Category{
  id String @id @default(uuid())
  name String 
  campanions Companion[]
}

model Companion {
  id  String @id @default(uuid())
  userId String 
  userName String
  src String
  name String @db.Text
  description String
  instructions String @db.Text
  seed String @db.Text

  messages  Message[]


  categoryId String
  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}


enum Role{
 user
 system
}


model Message {
  id String @id @default(uuid())
  role Role
  content String @db.Text
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  companionId String
  userId String

  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}


model UserSubscription{
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String? @unique @map(name:"stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name:"stripe_subscription_id")
  stripePriceId String? @unique @map(name:"stripe_price_id")
  stripeCurrentPerioEnd DateTime? @map(name:"strip_current_period_end")
  
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Verificationtoken {
  id String @id @default(uuid())
  email String
  token String
  expires DateTime

  @@unique([email,token])
}